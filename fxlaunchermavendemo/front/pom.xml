<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <artifactId>front</artifactId>
  <packaging>jar</packaging>

  <parent>
    <groupId>fxlauncher</groupId>
    <artifactId>fxlauncher-parent</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <junit.version>5.10.2</junit.version>

    <!-- Installer Filename without suffix -->
    <app.filename>FxlDemo</app.filename>

    <!-- Optional override to specify where the cached files are stored. Default is current working directory -->
    <app.cacheDir>USERLIB/FxlDemo</app.cacheDir>

    <!-- Optional parameters to the application, will be embedded in the launcher and can be overriden on the command line -->
    <app.parameters>--myOption=myValue --myOtherOption=myOtherValue</app.parameters>

    <!-- The Application vendor used by javapackager -->
    <app.vendor>Acme Inc</app.vendor>

    <!-- Base URL where you will host the application artifacts -->
    <app.url>http://192.168.1.16</app.url>

    <!-- Optional scp target for application artifacts hosted at the above url -->
    <app.deploy.target>juan@192.168.1.16</app.deploy.target>

    <!-- The app and launcher will be assembled in this folder -->
    <app.dir>${project.build.directory}</app.dir>

    <!-- Native installers will be built in this folder -->
    <app.installerdir>${project.build.directory}/installer</app.installerdir>

    <!-- Should the client downgrade if the server version is older than the local version? -->
    <app.acceptDowngrade>false</app.acceptDowngrade>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
    <dependency>
      <groupId>fxlauncher</groupId>
      <artifactId>fxlauncherlib</artifactId>
      <version>1.0-SNAPSHOT</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.openjfx</groupId>
        <artifactId>javafx-maven-plugin</artifactId>
        <version>0.0.8</version>
        <executions>
          <execution>
            <!-- Default configuration for running with: mvn clean javafx:run -->
            <id>default-cli</id>
            <configuration>
              <mainClass>fxlauncher.front/fxlauncher.front.HelloApplication</mainClass>
              <launcher>myapp</launcher>
              <jlinkZipName>myimage</jlinkZipName>
              <jlinkImageName>imagezip</jlinkImageName>
              <noManPages>true</noManPages>
              <stripDebug>true</stripDebug>
              <noHeaderFiles>true</noHeaderFiles>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Copy dependencies to appdir, this was in the original example, in the original example a FAT jar was created
      using JavaPackager but that approach is not the same as the new tools like Jlink and JPackage which are what we use
      to deploy our JavaFx apps nowadays, there is possibility to reproduce a fat jar behavior using JPackage alone but the
      plugins that exists might not allow you to do that so it'd have to be done manually. Using the configuration below
      was important to implementation of the original solution, this would allows us to copy all the depencies jars into our
      target folder so we can then push them into our server and also pack them using Jpackager, again this produces basically
      a Fat Jar which is plain old classpath launching and that is why an URLClassLoader was sufficient to load jar dinamically
       -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <excludeScope>provided</excludeScope>
          <outputDirectory>${app.dir}</outputDirectory>
          <stripVersion>true</stripVersion>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- since this plugin is in parent pom we don't need to declare its version. this will output the jar file of this module to the specified directory -->
<!--      <plugin>-->
<!--        <groupId>org.apache.maven.plugins</groupId>-->
<!--        <artifactId>maven-compiler-plugin</artifactId>-->
<!--        <configuration>-->
<!--          <outputDirectory>${app.dir}</outputDirectory>-->
<!--        </configuration>-->
<!--      </plugin>-->

      <plugin>
      <groupId>org.codehaus.mojo</groupId>
      <artifactId>exec-maven-plugin</artifactId>
      <version>3.5.1</version>
      <!-- Generate app.xml manifest -->
      <executions>
      <execution>
        <id>create-manifest</id>
        <phase>package</phase>
        <goals>
          <goal>java</goal>
        </goals>
        <configuration>
          <mainClass>fxlauncher.CreateManifest</mainClass>
          <arguments>
            <argument>${app.url}</argument>
            <argument>fxlauncher.front.HelloApplication</argument>
            <argument>${app.dir}</argument>
            <argument>--cache-dir=${app.cacheDir}</argument>
            <argument>--accept-downgrade=${app.acceptDowngrade}</argument>
            <argument>--include-extensions=jpg</argument>
            <argument>${app.parameters}</argument>
          </arguments>
        </configuration>
      </execution>

        <execution>
          <id>embed-manifest-in-launcher</id>
          <phase>package</phase>
          <goals>
            <goal>exec</goal>
          </goals>
          <configuration>
            <executable>jar</executable>
            <workingDirectory>${app.dir}</workingDirectory>
            <arguments>
              <argument>uf</argument>
              <argument>../../fxlauncherlib/target/fxlauncherlib-1.0-SNAPSHOT.jar</argument>
              <argument>app.xml</argument>
            </arguments>
          </configuration>
        </execution>

        <execution>
          <id>embed-manifest-in-local-launcher</id>
          <phase>package</phase>
          <goals>
            <goal>exec</goal>
          </goals>
          <configuration>
            <executable>jar</executable>
            <workingDirectory>${app.dir}</workingDirectory>
            <arguments>
              <argument>uf</argument>
              <argument>../../../../.m2/repository/fxlauncher/fxlauncherlib/1.0-SNAPSHOT/fxlauncherlib-1.0-SNAPSHOT.jar</argument>
              <argument>app.xml</argument>
            </arguments>
          </configuration>
        </execution>

      </executions>
      </plugin>
    </plugins>
  </build>
</project>